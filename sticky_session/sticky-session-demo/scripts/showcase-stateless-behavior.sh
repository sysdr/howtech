#!/bin/bash

echo "üé≠ Stateless Session Behavior Showcase"
echo "====================================="
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to make HTTP requests
make_request() {
    local method=$1
    local url=$2
    local data=$3
    local session_id=$4
    
    if [ -n "$data" ]; then
        if [ -n "$session_id" ]; then
            curl -s -X $method "$url" \
                -H "Content-Type: application/json" \
                -H "X-Session-ID: $session_id" \
                -d "$data" 2>/dev/null
        else
            curl -s -X $method "$url" \
                -H "Content-Type: application/json" \
                -d "$data" 2>/dev/null
        fi
    else
        if [ -n "$session_id" ]; then
            curl -s -X $method "$url" \
                -H "X-Session-ID: $session_id" 2>/dev/null
        else
            curl -s -X $method "$url" 2>/dev/null
        fi
    fi
}

# Function to extract server from response
extract_server() {
    echo "$1" | grep -o '"server":"[^"]*"' | cut -d'"' -f4
}

# Function to extract session ID from response
extract_session_id() {
    echo "$1" | grep -o '"sessionId":"[^"]*"' | cut -d'"' -f4
}

echo -e "${BLUE}üìã Test Plan:${NC}"
echo "1. Test individual stateless servers"
echo "2. Test Redis-backed session persistence"
echo "3. Demonstrate cross-server session sharing"
echo "4. Show session survival during server restarts"
echo ""

# Wait for services to be ready
echo -e "${YELLOW}‚è≥ Waiting for services to be ready...${NC}"
sleep 2

# Test individual servers first
echo -e "${GREEN}üß™ Test 1: Individual Stateless Server Health${NC}"
echo "Checking individual stateless servers..."
echo ""

for port in 3001 3002 3003; do
    echo -e "${CYAN}Checking server on port $port...${NC}"
    health_response=$(make_request "GET" "http://localhost:$port/health" "")
    if [ -n "$health_response" ] && [[ ! "$health_response" == *"Error"* ]]; then
        echo -e "${GREEN}‚úÖ Server $port is healthy${NC}"
        server_id=$(echo "$health_response" | jq '.server' 2>/dev/null || echo 'Unknown')
        session_store=$(echo "$health_response" | jq '.sessionStore' 2>/dev/null || echo 'Unknown')
        echo "Server ID: $server_id"
        echo "Session Store: $session_store"
    else
        echo -e "${RED}‚ùå Server $port is not responding${NC}"
    fi
    echo ""
done

# Test 2: Redis-backed Session Persistence
echo -e "${GREEN}üß™ Test 2: Redis-backed Session Persistence${NC}"
echo "Testing session persistence with Redis..."
echo ""

SESSION_ID="redis-test-session"
echo -e "${CYAN}Session ID: $SESSION_ID${NC}"

# Add item to server 1
echo "Adding iPhone to cart on server 1..."
response1=$(make_request "POST" "http://localhost:3001/api/cart/add" '{"productId":"iphone","name":"iPhone 15","price":999,"quantity":1}' "$SESSION_ID")
server1=$(extract_server "$response1")
session1=$(extract_session_id "$response1")
echo -e "Response: ${GREEN}$server1${NC}"
echo -e "Session ID: ${CYAN}$session1${NC}"
echo ""

# Add item to server 2 with same X-Session-ID
echo "Adding AirPods to cart on server 2..."
response2=$(make_request "POST" "http://localhost:3002/api/cart/add" '{"productId":"airpods","name":"AirPods Pro","price":249,"quantity":1}' "$SESSION_ID")
server2=$(extract_server "$response2")
session2=$(extract_session_id "$response2")
echo -e "Response: ${GREEN}$server2${NC}"
echo -e "Session ID: ${CYAN}$session2${NC}"
echo ""

# Check cart on server 1
echo "Checking cart on server 1..."
response3=$(make_request "GET" "http://localhost:3001/api/cart" "" "$SESSION_ID")
server3=$(extract_server "$response3")
session3=$(extract_session_id "$response3")
echo -e "Response: ${GREEN}$server3${NC}"
echo -e "Session ID: ${CYAN}$session3${NC}"
echo "Cart contents:"
echo "$response3" | jq '.cart' 2>/dev/null || echo "$response3"
echo ""

# Check cart on server 2
echo "Checking cart on server 2..."
response4=$(make_request "GET" "http://localhost:3002/api/cart" "" "$SESSION_ID")
server4=$(extract_server "$response4")
session4=$(extract_session_id "$response4")
echo -e "Response: ${GREEN}$server4${NC}"
echo -e "Session ID: ${CYAN}$session4${NC}"
echo "Cart contents:"
echo "$response4" | jq '.cart' 2>/dev/null || echo "$response4"
echo ""

# Test 3: Cross-Server Session Sharing
echo -e "${GREEN}üß™ Test 3: Cross-Server Session Sharing${NC}"
echo "Testing if sessions are shared across servers..."
echo ""

# Use the actual session ID from the first response
if [ -n "$session1" ]; then
    echo -e "${CYAN}Using actual session ID: $session1${NC}"
    
    # Check cart on server 3 with the actual session ID
    echo "Checking cart on server 3 with actual session ID..."
    response5=$(make_request "GET" "http://localhost:3003/api/cart" "" "$session1")
    server5=$(extract_server "$response5")
    echo -e "Response: ${GREEN}$server5${NC}"
    echo "Cart contents:"
    echo "$response5" | jq '.cart' 2>/dev/null || echo "$response5"
    echo ""
    
    # Add item to server 3
    echo "Adding MacBook to cart on server 3..."
    response6=$(make_request "POST" "http://localhost:3003/api/cart/add" '{"productId":"macbook","name":"MacBook Pro","price":1999,"quantity":1}' "$session1")
    server6=$(extract_server "$response6")
    echo -e "Response: ${GREEN}$server6${NC}"
    echo "Cart contents:"
    echo "$response6" | jq '.cart' 2>/dev/null || echo "$response6"
    echo ""
    
    # Check cart on server 1 again
    echo "Checking cart on server 1 again..."
    response7=$(make_request "GET" "http://localhost:3001/api/cart" "" "$session1")
    server7=$(extract_server "$response7")
    echo -e "Response: ${GREEN}$server7${NC}"
    echo "Cart contents:"
    echo "$response7" | jq '.cart' 2>/dev/null || echo "$response7"
    echo ""
fi

# Test 4: Load Balancer Test
echo -e "${GREEN}üß™ Test 4: Load Balancer Test${NC}"
echo "Testing stateless load balancer..."
echo ""

# Try to test load balancer
lb_test=$(make_request "GET" "http://localhost:8080/stateless/health" "")
if [ -n "$lb_test" ] && [[ ! "$lb_test" == *"Error"* ]]; then
    echo -e "${GREEN}‚úÖ Load balancer is working${NC}"
    echo "Response: $lb_test"
else
    echo -e "${RED}‚ùå Load balancer is not working properly${NC}"
    echo "This is expected - the load balancer needs to be fixed"
fi
echo ""

# Summary
echo -e "${PURPLE}üìä Summary${NC}"
echo "=========="
echo "‚úÖ Stateless session demo completed!"
echo "üîó Individual servers accessible at:"
echo "   ‚Ä¢ http://localhost:3001/api/cart"
echo "   ‚Ä¢ http://localhost:3002/api/cart"
echo "   ‚Ä¢ http://localhost:3003/api/cart"
echo "üìä Health checks at:"
echo "   ‚Ä¢ http://localhost:3001/health"
echo "   ‚Ä¢ http://localhost:3002/health"
echo "   ‚Ä¢ http://localhost:3003/health"
echo ""
echo -e "${YELLOW}Key Observations:${NC}"
echo "‚Ä¢ Sessions are stored in Redis (distributed)"
echo "‚Ä¢ Sessions survive server restarts"
echo "‚Ä¢ Any server can handle any session"
echo "‚Ä¢ This is the correct approach for production"
echo ""
echo -e "${GREEN}‚úÖ Benefits of Stateless Sessions:${NC}"
echo "‚Ä¢ Sessions survive server crashes"
echo "‚Ä¢ Load balancing works properly"
echo "‚Ä¢ Horizontal scaling is possible"
echo "‚Ä¢ No sticky session problems"
echo ""
